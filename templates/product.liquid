{%- section 'product-template' -%}

<script type="text/javascript">
  var _learnq = _learnq || [];

  var item = {
    Name: {{ product.title|json }},
    ProductID: {{ product.id|json }},
    Categories: {{ product.collections|map:'title'|json }},
    ImageURL: "https:{{ product.featured_image.src|img_url:'grande' }}",
    URL: "{{ shop.secure_url }}{{ product.url }}",
    Brand: {{ product.vendor|json }},
    Price: {{ product.price|money|json }},
    CompareAtPrice: {{ product.compare_at_price_max|money|json }}
  };

  _learnq.push(['track', 'Viewed Product', item]);
  _learnq.push(['trackViewedItem', {
    Title: item.Name,
    ItemId: item.ProductID,
    Categories: item.Categories,
    ImageUrl: item.ImageURL,
    Url: item.URL,
    Metadata: {
      Brand: item.Brand,
      Price: item.Price,
      CompareAtPrice: item.CompareAtPrice
    }
  }]);
</script>

<script type="text/javascript">
var _learnq = _learnq || [];
	document.getElementById("AddToCart").addEventListener('click',function (){
 		_learnq.push(['track', 'Added to Cart', item]);
	});
</script>

<script>
  const addToCartScrollBtn = document.querySelector('.js-product-button-scroll');
  const productSizes = document.querySelector('.js-product-sizes');

  if (addToCartScrollBtn && productSizes) {
    const clonedAddToCart = addToCartScrollBtn.cloneNode(true);
    clonedAddToCart.classList.add('form__button__container--mobile-fixed');
    clonedAddToCart.classList.add('js-product-button-scroll-cloned');
    clonedAddToCart.classList.remove('js-product-button-scroll');
    addToCartScrollBtn.parentNode.insertBefore(clonedAddToCart, addToCartScrollBtn.nextSibling);

    const fixedAddToCart = document.querySelector('.js-product-button-scroll-cloned');

    const isInViewport = element => {
      const rect = element.getBoundingClientRect();
      return (
          rect.top >= 0 &&
          rect.left >= 0 &&
          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
          rect.right <= (window.innerWidth || document.documentElement.clientWidth)
      );
    }

    const editAddToCartLocation = () => {
      const addToCartScrollBtnIsInViewport = isInViewport(addToCartScrollBtn);

      if (addToCartScrollBtnIsInViewport) {
        fixedAddToCart.classList.remove('is-active');
      } else {
        fixedAddToCart.classList.add('is-active');
      }
    }

    fixedAddToCart.addEventListener('click', function(event) {
      event.preventDefault();

      window.scrollTo({
        top: productSizes.offsetTop + 110, 
        left: 0, 
        behavior: 'smooth' 
      });
    })

    document.addEventListener('DOMContentLoaded', editAddToCartLocation);
    window.addEventListener('scroll', editAddToCartLocation);
    editAddToCartLocation();

    // Move size chart above add to cart button
    const product = document.querySelector('.js-product');
    const config = { attributes: false, childList: true, subtree: true };

    const callback = (mutationList, observer) => {
      for (const mutation of mutationList) {
        if (mutation.type === 'childList') {
          if (mutation.target && mutation.target.id && mutation.target.id == 'Avada-SC-button') {
            const addToCart = document.querySelector('.js-product-button-scroll');
            const targetClone = mutation.target.cloneNode(true);
            mutation.target.remove();
            addToCart.closest('.form__buttons').insertBefore(targetClone, addToCart);
            observer.disconnect();
          }
        }
      }
    };

    const observer = new MutationObserver(callback);
    if (window.innerWidth <= 767) {
      observer.observe(product, config);
    }
  }
</script>

{% render 'nosto-element', id:'productpage-nosto-1' %}

{% render 'nosto-element', id:'productpage-nosto-2' %}

{% render 'nosto-element', id:'productpage-nosto-3' %}
